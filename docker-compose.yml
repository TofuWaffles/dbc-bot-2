networks:
  postgresql:
    driver: bridge
  images:
    driver: bridge
  bracket:
    driver: bridge

volumes:
  pgdata:

services:
  postgres:  
    container_name: postgresql
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./dbcbot/migrations:/docker-entrypoint-initdb.d
    restart: always
    networks:
      - postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  dbc-bot:
    container_name: dbc-bot
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      IMAGES_API: "http://images:${IMAGES_PORT}"
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      BRAWL_STARS_TOKEN: ${BRAWL_STARS_TOKEN}
      SQLX_OFFLINE: ${SQLX_OFFLINE}
    networks:
      - postgresql
      - images
    volumes:
      - /etc/ssl/certs/:/etc/ssl/certs:ro
    build:
      context: ./dbcbot
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
      - images

  images:
    container_name: images-server
    build:
      context: ./images
      dockerfile: Dockerfile
    environment:
      PORT: ${IMAGES_PORT}
    ports:
      - "${IMAGES_PORT}:${IMAGES_PORT}"
    restart: always
    networks:
      - images
    command: "uvicorn main:app --reload --host 0.0.0.0 --port ${IMAGES_PORT}"
    
  bracket:
    container_name: bracket
    build:
      context: ./dbc-bracket
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "${BRACKET_PORT}:${BRACKET_PORT}"
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
    networks:
      - postgresql
    restart: always
  
