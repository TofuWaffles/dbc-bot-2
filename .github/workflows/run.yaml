name: Build, Test, and Deploy
on:
  workflow_dispatch:

env:
  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKENS }}
  BRAWL_STARS_TOKEN: ${{ secrets.BRAWL_STARS_TOKENS }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_DB }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  SQLX_OFFLINE: ${{ secrets.SQLX_OFFLINE }}
  IMAGES_PORT: ${{ secrets.IMAGES_PORT }}
  BRACKET_PORT: ${{ secrets.BRACKET_PORT }}
jobs:
  dbc-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/dbcbot/.cargo
            dbcbot/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/dbcbot/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          rustflags: ""

      - name: Build and test code
        run: |
          cd dbcbot
          cargo build --verbose
          cargo test --verbose
  
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish a Docker image for ${{ github.repository }}/dbcbot
        uses: macbre/push-to-ghcr@master
        with:
          context: dbcbot
          dockerfile: ./dbcbot/Dockerfile
          image_name: ${{ github.repository }}/dbcbot
          github_token: ${{ secrets.GITHUB_TOKEN }}

  bracket:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      
      - name: Build and test code
        env:
          DATABASE_URL: "postgresql://PLACEHOLDER:PLACEHOLDER@PLACEHOLDER:5432/PLACEHOLDER"
        run: |
          cd dbc-bracket
          npm ci
          npm run build --if-present

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish a Docker image for ${{ github.repository }}/bracket
        uses: macbre/push-to-ghcr@master
        with:
          context: dbc-bracket
          dockerfile: ./dbc-bracket/Dockerfile
          image_name: ${{ github.repository }}/bracket
          github_token: ${{ secrets.GITHUB_TOKEN }}

  images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with: 
          path: ~/images/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/images/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.13"
        
      - name: Install dependencies
        run: |
          cd images
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish a Docker image for ${{ github.repository }}/images
        uses: macbre/push-to-ghcr@master
        with:
          context: images
          dockerfile: ./images/Dockerfile
          image_name: ${{ github.repository }}/images
          github_token: ${{ secrets.GITHUB_TOKEN }}
  
  deploy:
    needs: dbc-bot
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Copy docker-compose.yml to droplet
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: docker-compose.yml
        target:  /root/dbcbot

    - name: Create .env file on droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd ~/dbcbot
          echo "BRAWL_STARS_TOKEN=${{ secrets.BRAWL_STARS_TOKEN }}" > ~/.env
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> ~/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ~/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ~/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ~/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> ~/.env
          echo "SQLX_OFFLINE=${{ secrets.SQLX_OFFLINE }}" >> ~/.env
          echo "IMAGES_PORT=${{ secrets.IMAGES_PORT }}" >> ~/.env
          echo "BRACKET_PORT=${{ secrets.BRACKET_PORT }}" >> ~/.env
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> ~/.env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> ~/.env

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd ~/dbcbot
          docker compose down
          docker system prune -a
          docker pull ghcr.io/${{ github.repository }}/dbcbot
          docker pull ghcr.io/${{ github.repository }}/images
          docker pull ghcr.io/${{ github.repository }}/bracket
          docker compose up --build -d dbc-bot images bracket
          docker compose logs