name: DBC Bot Deployment

on:
  workflow_dispatch:

env:
  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKENS }}
  BRAWL_STARS_TOKEN: ${{ secrets.BRAWL_STARS_TOKENS }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_DB }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  SQLX_OFFLINE: ${{ vars.SQLX_OFFLINE }}
  IMAGES_PORT: ${{ vars.IMAGES_PORT }}
  BRACKET_PORT: ${{ vars.BRACKET_PORT }}
  DATABASE_URL: postgresql://${{secrets.POSTGRES_USER}}:${{secrets.POSTGRES_PASSWORD}}@postgres:5432/${{secrets.POSTGRES_DB}}?sslmode=disable

jobs:
  dbc-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/dbcbot/.cargo
            ~/dbcbot/.cargo/registry/index/
            ~/dbcbot/.cargo/registry/cache/
            ~/dbcbot.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/dbcbot/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          rustflags: ""

      - name: Build and test code
        run: |
          cd dbcbot
          cargo build --verbose
          cargo test --verbose

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish a Docker image for ${{ github.repository }}/dbcbot
        uses: macbre/push-to-ghcr@master
        with:
          context: dbcbot
          dockerfile: ./dbcbot/Dockerfile
          image_name: ${{ github.repository }}/dbcbot
          github_token: ${{ secrets.GITHUB_TOKEN }}

          
  deployment:
    needs: dbc-bot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Copy docker-compose.yml to droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: prod.docker-compose.yml
          target: /root/dbcbot

      - name: Create .env file on droplet
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/dbcbot
            if [ -f .env ]; then
              echo ".env file exists"
            else
              echo "BRAWL_STARS_TOKEN=${{ secrets.BRAWL_STARS_TOKEN }}" > ./.env
              echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> ./.env
              echo "DATABASE_URL=${DATABASE_URL}" >> ./.env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./.env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./.env
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> ./.env
              echo "SQLX_OFFLINE=${{ vars.SQLX_OFFLINE }}" >> ./.env
              echo "IMAGES_PORT=${{ vars.IMAGES_PORT }}" >> ./.env
              echo "BRACKET_PORT=${{ vars.BRACKET_PORT }}" >> ./.env
              echo "GITHUB_REPOSITORY=$(echo '${{ github.repository }}' | awk '{print tolower($0)}')" >> .env
              echo "DOMAIN=${{ secrets.DOMAIN }}" >> ./.env
            fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Deploy dbcbot
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/dbcbot
            export REPO=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
            docker compose down
            docker pull ghcr.io/$REPO/dbcbot
            docker compose -f prod.docker-compose.yml up -d dbcbot
            docker compose -f prod.docker-compose.yml logs dbcbot
